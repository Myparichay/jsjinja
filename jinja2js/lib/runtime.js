// Generated by CoffeeScript 1.4.0
(function() {
  __hasProp = {}.hasOwnProperty,
__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
;

  var Context, Jinja2, Set, Template, new_context, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  new_context = function(environment, template_name, blocks, vars, shared, globals, locals) {
    var parent;
    vars = vars || {};
    parent = (shared ? vars : globals);
    return new Context(environment, parent, template_name, blocks);
  };

  Set = (function() {

    function Set() {}

    Set.prototype.add = function(o) {
      return this[o] = true;
    };

    Set.prototype.remove = function(o) {
      return delete this[o];
    };

    return Set;

  })();

  Template = (function() {

    function Template(environment) {
      this.environment = environment;
    }

    Template.prototype.root = function() {};

    Template.prototype.render = function(obj) {
      var context;
      context = new Context(this.environment, null, null, this.blocks);
      context.vars = obj;
      return this.root(context);
    };

    Template.prototype.module = function() {
      var context, key, module, _i, _len, _ref;
      context = new Context(this.environment);
      this.root(context);
      module = {};
      _ref = context.exported_vars;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        module[key] = context.vars[key];
      }
      return module;
    };

    Template.prototype.new_context = function(vars, shared, locals) {
      return new_context(this.environment, this.name, this.blocks, vars, shared, this.globals, locals);
    };

    return Template;

  })();

  Context = (function() {

    function Context(environment, parent, name, blocks) {
      var block_name;
      this.environment = environment;
      this.parent = parent;
      this.vars = {};
      this.blocks = {};
      for (block_name in blocks) {
        this.blocks[block_name] = [blocks[block_name]];
      }
      this.exported_vars = new Set();
    }

    Context.prototype["super"] = function(name, current) {
      var blocks, index;
      blocks = this.blocks[name];
      index = blocks.indexOf(current) + 1;
      return blocks[index];
    };

    Context.prototype.resolve = function(key) {
      var _ref;
      return this.vars[key] || ((_ref = this.parent) != null ? _ref.resolve(key) : void 0);
    };

    Context.prototype.call = function(f, args, kwargs) {
      var arg, call_args;
      call_args = [];
      for (arg in f.__args__) {
        call_args.push(kwargs[f.__args__[arg]] || args.pop());
      }
      return f.apply(null, call_args);
    };

    return Context;

  })();

  Jinja2 = {
    templates: {},
    filters: {},
    registerFilter: function(name, func) {
      return this.filters[name] = func;
    },
    getFilter: function(name) {
      return this.filters[name];
    },
    registerTemplate: function(name, template) {
      return this.templates[name] = template;
    },
    getTemplate: function(name) {
      return new this.templates[name];
    },
    utils: {
      to_string: function(x) {
        if (x) {
          return String(x);
        } else {
          return "";
        }
      },
      missing: undefined,
      loop: function(i, len) {
        return {
          first: i === 0,
          last: i === (len - 1),
          index: i + 1,
          index0: i,
          revindex: len - i,
          revindex0: len - i - 1,
          length: len
        };
      }
    },
    "extends": __extends,
    Template: Template,
    Context: Context
  };

  Jinja2.registerFilter('capitalize', function(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  });

  Jinja2.registerFilter('escape', function(html) {
    return String(html).replace(/&(?!(\w+|\#\d+);)/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
  });

  root.Jinja2 = Jinja2;

}).call(this);

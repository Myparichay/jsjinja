// Generated by CoffeeScript 1.4.0
(function() {
  __hasProp = {}.hasOwnProperty,
__extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
;

  var Context, Jinja2, Set, Template, new_context, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  new_context = function(template_name, blocks, vars, shared, globals, locals) {
    var parent;
    vars = vars || {};
    parent = (shared ? vars : globals);
    return new Context(parent, template_name, blocks);
  };

  Set = (function() {

    function Set() {}

    Set.prototype.add = function(o) {
      return this[o] = true;
    };

    Set.prototype.remove = function(o) {
      return delete this[o];
    };

    return Set;

  })();

  Template = (function() {

    function Template(environment) {
      var key;
      this.environment = environment;
      this.blocks = {};
      for (key in this) {
        if (key.indexOf('block_') === 0) {
          this.blocks[key.slice(6)] = this[key];
        }
      }
    }

    Template.prototype.root = function() {};

    Template.prototype.render = function(obj) {
      var context;
      context = new this.environment.Context(this.environment, null, null, this.blocks);
      context.vars = obj;
      return this.root(context);
    };

    Template.prototype.module = function() {
      var context, key, module;
      context = new this.environment.Context(this.environment);
      this.root(context);
      module = {};
      for (key in context.exported_vars) {
        module[key] = context.vars[key];
      }
      return module;
    };

    Template.prototype.new_context = function(vars, shared, locals) {
      return new_context(this.name, this.blocks, vars, shared, this.globals, locals);
    };

    return Template;

  })();

  Context = (function() {

    function Context(environment, parent, name, blocks) {
      var block_name;
      this.environment = environment;
      this.parent = parent;
      this.vars = {};
      this.blocks = {};
      for (block_name in blocks) {
        this.blocks[block_name] = [blocks[block_name]];
      }
      this.exported_vars = new Set();
    }

    Context.prototype["super"] = function(name, current) {
      var blocks, index;
      blocks = this.blocks[name];
      index = blocks.indexOf(current) + 1;
      return blocks[index];
    };

    Context.prototype.resolve = function(key) {
      var _ref;
      return this.vars[key] || ((_ref = this.parent) != null ? _ref.resolve(key) : void 0) || this.environment.globals[key];
    };

    Context.prototype.call = function(f, args, kwargs) {
      var arg, call_args, _ref;
      if (!f) {
        return;
      }
      call_args = !f.__args__ ? args : [];
      for (arg in f.__args__) {
        call_args.push(kwargs[(_ref = f.__args__) != null ? _ref[arg] : void 0] || args.pop());
      }
      return f.apply(null, call_args);
    };

    Context.prototype.callfilter = function(f, preargs, args, kwargs) {
      var arg, call_args;
      call_args = preargs;
      for (arg in f.__args__) {
        call_args.push(kwargs[f.__args__[arg]] || args.pop());
      }
      return f.apply(null, call_args);
    };

    return Context;

  })();

  Jinja2 = {
    templates: {},
    filters: {},
    globals: {},
    registerFilter: function(name, func) {
      return this.filters[name] = func;
    },
    getFilter: function(name) {
      return this.filters[name];
    },
    registerTemplate: function(name, template) {
      return this.templates[name] = template;
    },
    getTemplate: function(name, from) {
      return new this.templates[name];
    },
    utils: {
      to_string: function(x) {
        if (x) {
          return String(x);
        } else {
          return "";
        }
      },
      missing: undefined,
      loop: function(i, len) {
        return {
          first: i === 0,
          last: i === (len - 1),
          index: i + 1,
          index0: i,
          revindex: len - i,
          revindex0: len - i - 1,
          length: len,
          cycle: function() {
            return arguments[i % arguments.length];
          }
        };
      }
    },
    "extends": __extends,
    Template: Template,
    Context: Context
  };

  Jinja2.registerFilter('capitalize', function(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  });

  Jinja2.registerFilter('escape', function(html) {
    return String(html).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
  });

  Jinja2.registerFilter('default', function(value, default_value, boolean) {
    if ((boolean && !value) || (value === void 0)) {
      return default_value;
    } else {
      return value;
    }
  });

  Jinja2.registerFilter('truncate', function(str, length, killwords, end) {
    length || (length = 255);
    end || (end = '...');
    if (str.length <= length) {
      return str;
    } else if (killwords) {
      return str.substring(0, length);
    } else {
      str = str.substring(0, maxLength + 1);
      str = str.substring(0, Math.min(str.length, str.lastIndexOf(" ")));
      return str + end;
    }
  });

  Jinja2.registerFilter('length', function(obj) {
    return obj.length;
  });

  Jinja2.registerFilter('count', function(obj) {
    return obj.length;
  });

  Jinja2.registerFilter('indent', function(str, width, indentfirst) {
    var indention;
    width || (width = 4);
    indention = width ? Array(width + 1).join(" ") : "";
    return (indentfirst ? str : str.replace(/\n$/, '')).replace(/\n/g, "\n" + indention);
  });

  Jinja2.registerFilter('random', function(environment, seq) {
    if (seq) {
      return seq[Math.floor(Math.random() * seq.length)];
    } else {
      return undefined;
    }
  });

  Jinja2.registerFilter('last', function(environment, seq) {
    if (seq) {
      return seq[seq.length - 1];
    } else {
      return undefined;
    }
  });

  Jinja2.registerFilter('first', function(environment, seq) {
    if (seq) {
      return seq[0];
    } else {
      return undefined;
    }
  });

  Jinja2.registerFilter('title', function(str) {
    return str.replace(/\w\S*/g, function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
  });

  Jinja2.registerFilter('lower', function(str) {
    return str.toLowerCase();
  });

  Jinja2.registerFilter('upper', function(str) {
    return str.toUpperCase();
  });

  root.Jinja2 = Jinja2;

}).call(this);
